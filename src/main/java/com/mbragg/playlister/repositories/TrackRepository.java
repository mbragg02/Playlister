package com.mbragg.playlister.repositories;

import com.mbragg.playlister.models.entitys.Genre;
import com.mbragg.playlister.models.entitys.Track;
import org.springframework.data.neo4j.annotation.Query;
import org.springframework.data.neo4j.conversion.Result;
import org.springframework.data.neo4j.repository.GraphRepository;

/**
 * Defines Cypher queries for the retrieving results from the Neo4j database.
 * <p>
 * Concrete class is generated by Spring Data Neo4J: with CRUD boilerplate methods based on type: Track
 *
 * @author Michael Bragg
 */
public interface TrackRepository extends GraphRepository<Track> {

    Track findByFilename(String name);

    @Query("START Genre=node({0}) MATCH (Genre)-[s:IS_GENRE]-(t1:Track) RETURN t1")
    Result<Track> findByGenreNode(Genre genreNode);


    @Query("MATCH (t1:Track {filename:{0}})-[s:SIMILARITY]-(t2:Track) " +
            "WITH t2, s.similarity AS sim " +
            "ORDER BY sim ASC " +
            "LIMIT {1} " +
            "RETURN t2")
    Result<Track> findAllSimilarTracks(String filename, int count);

    @Query("MATCH (t1:Track {filename:{0}})-[d:IS_GENRE]->(Genre)--(t2:Track)-[s:SIMILARITY]-(t1:Track) " +
            "WITH t2, s.similarity AS sim " +
            "ORDER BY sim ASC " +
            "LIMIT {1} " +
            "RETURN t2")
    Result<Track> findAllSimilarTracksWithGenre(String filename, int count);

}
